{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from './store/auth-context';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoggedIn: false\n    };\n  }\n}\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   useEffect(()=>{\n//     const userLoggedInInformation=localStorage.getItem('isLoggedIn');\n//     if(userLoggedInInformation==='1')\n//     {\n//       setIsLoggedIn(true);\n//     }\n//   } ,[]);\n//   const loginHandler = (email, password) => {\n//     // We should of course check email and password\n//     // But it's just a dummy/ demo anyways\n//     localStorage.setItem('isLoggedIn','1');\n//     setIsLoggedIn(true);\n//   };\n\n//   const logoutHandler = () => {\n//     localStorage.removeItem('isLoggedIn');\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{\n//       isLoggedIn:isLoggedIn,\n//       onLogOut:logoutHandler\n//     }}>\n//       <MainHeader/>\n//       <main>\n//         {!isLoggedIn && <Login onLogin={loginHandler} />}\n//         {isLoggedIn && <Home onLogout={logoutHandler} />}\n//       </main>\n//     </AuthContext.Provider>\n//   );\n// }\n\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","Login","Home","MainHeader","AuthContext","App","Component","constructor","props","state","isLoggedIn"],"sources":["/Users/tkniranjanbhai/Desktop/React-Course/04-starting-project/src/App.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from './store/auth-context';\n\nclass App extends React.Component{\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      isLoggedIn:false\n    }\n  }\n}\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   useEffect(()=>{\n//     const userLoggedInInformation=localStorage.getItem('isLoggedIn');\n//     if(userLoggedInInformation==='1')\n//     {\n//       setIsLoggedIn(true);\n//     }\n//   } ,[]);\n//   const loginHandler = (email, password) => {\n//     // We should of course check email and password\n//     // But it's just a dummy/ demo anyways\n//     localStorage.setItem('isLoggedIn','1');\n//     setIsLoggedIn(true);\n//   };\n\n//   const logoutHandler = () => {\n//     localStorage.removeItem('isLoggedIn');\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{\n//       isLoggedIn:isLoggedIn,\n//       onLogOut:logoutHandler\n//     }}>\n//       <MainHeader/>\n//       <main>\n//         {!isLoggedIn && <Login onLogin={loginHandler} />}\n//         {isLoggedIn && <Home onLogout={logoutHandler} />}\n//       </main>\n//     </AuthContext.Provider>\n//   );\n// }\n\nexport default App;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AACjD,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,WAAW,MAAM,sBAAsB;AAE9C,MAAMC,GAAG,SAASP,KAAK,CAACQ,SAAS;EAC/BC,WAAWA,CAACC,KAAK,EACjB;IACE,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAC;MACTC,UAAU,EAAC;IACb,CAAC;EACH;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeL,GAAG"},"metadata":{},"sourceType":"module"}